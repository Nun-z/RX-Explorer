# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

pr:
  autoCancel: true
  branches:
    include:
    - master

variables:
- group: UWP-PipeLineVariable
- name: buildProject
  value: 'Package'
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'x86|x64|ARM'
- name: buildConfiguration
  value: 'Release'
- name: SideLoadPackageDir
  value: '$(build.artifactStagingDirectory)\SideLoad\\'
- name: CIPackageDir
  value: '$(build.artifactStagingDirectory)\CI\\'

jobs:
- job: CIBuild
  timeoutInMinutes: 0
  pool:
    vmImage: 'windows-latest'
  steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: DownloadSecureFile@1
      name: secureFile
      displayName: 'Download CA Certificate'
      inputs:
        secureFile: '$(signingCert.secureFileName)'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Start adding the PFX file to the certificate store."

          $pfxpath = '$(secureFile.secureFilePath)'
          $password = '$(signingCert.password)'      
      
          Add-Type -AssemblyName System.Security
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet)
          $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
          $store.Add($cert)
          $store.Close()

    - task: VSBuild@1
      displayName: 'Build RX-Explorer'
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/t:$(buildProject):Rebuild /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(CIPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=CI /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="$(signingCert.thumbprint)" /p:PackageCertificateKeyFile="$(secureFile.secureFilePath)" /p:PackageCertificatePassword="$(signingCert.password)"'
        configuration: '$(buildConfiguration)'
        clean: true
        msbuildArchitecture: 'x64'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: CIBuild'
      inputs:
        ArtifactName: 'CIBuild_Publish'
        PathtoPublish: '$(CIPackageDir)'

- job: SideLoadBuild
  timeoutInMinutes: 0
  pool:
    vmImage: 'windows-latest'
  steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: DownloadSecureFile@1
      name: secureFile
      displayName: 'Download CA Certificate'
      inputs:
        secureFile: '$(signingCert.secureFileName)'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Start adding the PFX file to the certificate store."

          $pfxpath = '$(secureFile.secureFilePath)'
          $password = '$(signingCert.password)'      
      
          Add-Type -AssemblyName System.Security
          $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
          $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet)
          $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
          $store.Add($cert)
          $store.Close()

    - task: VSBuild@1
      displayName: 'Build RX-Explorer'
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/t:$(buildProject):Rebuild /p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(SideLoadPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="$(signingCert.thumbprint)" /p:PackageCertificateKeyFile="$(secureFile.secureFilePath)" /p:PackageCertificatePassword="$(signingCert.password)"'
        configuration: '$(buildConfiguration)'
        clean: true
        msbuildArchitecture: 'x64'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: SideLoadBuild'
      inputs:
        ArtifactName: 'SideLoadBuild_Publish'
        PathtoPublish: '$(SideLoadPackageDir)'
